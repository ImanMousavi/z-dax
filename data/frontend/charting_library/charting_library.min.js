"use strict";
!(function(EMSarray, factory) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    factory(exports);
  } else {
    if ("function" == typeof define && define.amd) {
      define(["exports"], factory);
    } else {
      factory((EMSarray.TradingView = EMSarray.TradingView || {}));
    }
  }
})(this, function(self) {
  /**
   * @param {!Object} o
   * @param {!Object} add
   * @return {?}
   */
  function extend(o, add) {
    /** @type {!Object} */
    var out = make({}, o);
    var name;
    for (name in add) {
      if (
        "object" != typeof o[name] ||
        null === o[name] ||
        Array.isArray(o[name])
      ) {
        if (void 0 !== add[name]) {
          out[name] = add[name];
        }
      } else {
        out[name] = extend(o[name], add[name]);
      }
    }
    return out;
  }
  /**
   * @return {?}
   */
  function VERSION() {
    return "1.13 (internal id aa006190 @ 2019-01-16 09:58:44.238682)";
  }
  /**
   * @param {?} action
   * @return {undefined}
   */
  function cb(action) {
    window.addEventListener("DOMContentLoaded", action, false);
  }
  /** @type {function(!Object, ...(Object|null)): !Object} */
  var make =
    Object.assign ||
    function(t) {
      var x;
      /** @type {!Arguments} */
      var args = arguments;
      /** @type {number} */
      var i = 1;
      /** @type {number} */
      var argl = arguments.length;
      for (; i < argl; i++) {
        x = args[i];
        var k;
        for (k in x) {
          if (Object.prototype.hasOwnProperty.call(x, k)) {
            t[k] = x[k];
          }
        }
      }
      return t;
    };
  var presets = {
    mobile: {
      disabled_features: [
        "left_toolbar",
        "header_widget",
        "timeframes_toolbar",
        "edit_buttons_in_legend",
        "context_menus",
        "control_bar",
        "border_around_the_chart"
      ],
      enabled_features: []
    }
  };
  var options = {
    width: 800,
    height: 500,
    symbol: "AA",
    interval: "D",
    timezone: "Etc/UTC",
    container_id: "",
    library_path: "",
    locale: "en",
    widgetbar: {
      details: false,
      watchlist: false,
      watchlist_settings: {
        default_symbols: []
      }
    },
    overrides: {
      "mainSeriesProperties.showCountdown": false
    },
    studies_overrides: {},
    brokerConfig: {
      configFlags: {}
    },
    fullscreen: false,
    autosize: false,
    disabled_features: [],
    enabled_features: [],
    debug: false,
    logo: {},
    time_frames: [
      {
        text: "5y",
        resolution: "W"
      },
      {
        text: "1y",
        resolution: "W"
      },
      {
        text: "6m",
        resolution: "120"
      },
      {
        text: "3m",
        resolution: "60"
      },
      {
        text: "1m",
        resolution: "30"
      },
      {
        text: "5d",
        resolution: "5"
      },
      {
        text: "1d",
        resolution: "1"
      }
    ],
    client_id: "0",
    user_id: "0",
    charts_storage_api_version: "1.0",
    favorites: {
      intervals: [],
      chartTypes: []
    }
  };
  var UnsignedLong = (function() {
    /**
     * @param {!Object} opts
     * @return {undefined}
     */
    function Model(opts) {
      if (
        ((this._id =
          "tradingview_" +
          ((1048576 * (1 + Math.random())) | 0).toString(16).substring(1)),
        (this._ready = false),
        (this._readyHandlers = []),
        (this._onWindowResize = this._autoResizeChart.bind(this)),
        !opts.datafeed)
      ) {
        throw new Error("Datafeed is not defined");
      }
      if (((this._options = extend(options, opts)), opts.preset)) {
        var p = presets[opts.preset];
        if (p) {
          if (void 0 !== this._options.disabled_features) {
            this._options.disabled_features = this._options.disabled_features.concat(
              p.disabled_features
            );
          } else {
            this._options.disabled_features = p.disabled_features;
          }
          if (void 0 !== this._options.enabled_features) {
            this._options.enabled_features = this._options.enabled_features.concat(
              p.enabled_features
            );
          } else {
            this._options.enabled_features = p.enabled_features;
          }
        } else {
          console.warn("Unknown preset: `" + opts.preset + "`");
        }
      }
      if (
        "Dark" === this._options.theme &&
        void 0 === this._options.loading_screen
      ) {
        this._options.loading_screen = {
          backgroundColor: "#131722"
        };
      }
      this._create();
    }
    return (
      (Model.prototype.onChartReady = function(t) {
        if (this._ready) {
          t.call(this);
        } else {
          this._readyHandlers.push(t);
        }
      }),
      (Model.prototype.onGrayedObjectClicked = function(isBgroundImg) {
        this._innerAPI().onGrayedObjectClicked(isBgroundImg);
      }),
      (Model.prototype.onShortcut = function(s, e) {
        this._innerWindow().createShortcutAction(s, e);
      }),
      (Model.prototype.subscribe = function(event, subName) {
        this._innerAPI().subscribe(event, subName);
      }),
      (Model.prototype.unsubscribe = function(address, callback) {
        this._innerAPI().unsubscribe(address, callback);
      }),
      (Model.prototype.chart = function(data) {
        return this._innerAPI().chart(data);
      }),
      (Model.prototype.setLanguage = function(data) {
        this.remove();
        /** @type {string} */
        this._options.locale = data;
        this._create();
      }),
      (Model.prototype.setSymbol = function(elem, value, settings) {
        this._innerAPI().changeSymbol(elem, value + "", settings);
      }),
      (Model.prototype.remove = function() {
        window.removeEventListener("resize", this._onWindowResize);
        this._readyHandlers.splice(0, this._readyHandlers.length);
        delete window[this._id];
        var elem = this._getIFrameElement();
        elem.contentWindow.destroyChart();
        if (elem.parentNode) {
          elem.parentNode.removeChild(elem);
        }
      }),
      (Model.prototype.closePopupsAndDialogs = function() {
        this._innerAPI().closePopupsAndDialogs();
      }),
      (Model.prototype.selectLineTool = function(isBgroundImg) {
        this._innerAPI().selectLineTool(isBgroundImg);
      }),
      (Model.prototype.selectedLineTool = function() {
        return this._innerAPI().selectedLineTool();
      }),
      (Model.prototype.save = function(refreshForm) {
        this._innerAPI().saveChart(refreshForm);
      }),
      (Model.prototype.load = function(param, skin) {
        this._innerAPI().loadChart({
          json: param,
          extendedData: skin
        });
      }),
      (Model.prototype.getSavedCharts = function(isBgroundImg) {
        this._innerAPI().getSavedCharts(isBgroundImg);
      }),
      (Model.prototype.loadChartFromServer = function(isBgroundImg) {
        this._innerAPI().loadChartFromServer(isBgroundImg);
      }),
      (Model.prototype.saveChartToServer = function(
        isBgroundImg,
        stgs,
        index,
        concurrents
      ) {
        this._innerAPI().saveChartToServer(
          isBgroundImg,
          stgs,
          index,
          concurrents
        );
      }),
      (Model.prototype.removeChartFromServer = function(
        preflightData,
        prefetch
      ) {
        this._innerAPI().removeChartFromServer(preflightData, prefetch);
      }),
      (Model.prototype.onContextMenu = function(e) {
        this._innerAPI().onContextMenu(e);
      }),
      (Model.prototype.createButton = function(type) {
        return this._innerWindow().createButton(type);
      }),
      (Model.prototype.showNoticeDialog = function(isBgroundImg) {
        this._innerAPI().showNoticeDialog(isBgroundImg);
      }),
      (Model.prototype.showConfirmDialog = function(link) {
        this._innerAPI().showConfirmDialog(link);
      }),
      (Model.prototype.showLoadChartDialog = function() {
        this._innerAPI().showLoadChartDialog();
      }),
      (Model.prototype.showSaveAsChartDialog = function() {
        this._innerAPI().showSaveAsChartDialog();
      }),
      (Model.prototype.symbolInterval = function() {
        return this._innerAPI().getSymbolInterval();
      }),
      (Model.prototype.mainSeriesPriceFormatter = function() {
        return this._innerAPI().mainSeriesPriceFormatter();
      }),
      (Model.prototype.getIntervals = function() {
        return this._innerAPI().getIntervals();
      }),
      (Model.prototype.getStudiesList = function() {
        return this._innerAPI().getStudiesList();
      }),
      (Model.prototype.addCustomCSSFile = function(isBgroundImg) {
        this._innerWindow().addCustomCSSFile(isBgroundImg);
      }),
      (Model.prototype.applyOverrides = function(overrides) {
        this._options = extend(this._options, {
          overrides: overrides
        });
        this._innerWindow().applyOverrides(overrides);
      }),
      (Model.prototype.applyStudiesOverrides = function(isBgroundImg) {
        this._innerWindow().applyStudiesOverrides(isBgroundImg);
      }),
      (Model.prototype.watchList = function() {
        return this._innerAPI().watchlist();
      }),
      (Model.prototype.activeChart = function() {
        return this._innerAPI().activeChart();
      }),
      (Model.prototype.chartsCount = function() {
        return this._innerAPI().chartsCount();
      }),
      (Model.prototype.layout = function() {
        return this._innerAPI().layout();
      }),
      (Model.prototype.setLayout = function(mode) {
        this._innerAPI().setLayout(mode);
      }),
      (Model.prototype.changeTheme = function(themeid) {
        this._innerWindow().changeTheme(themeid);
      }),
      (Model.prototype.takeScreenshot = function() {
        this._innerAPI().takeScreenshot();
      }),
      (Model.prototype.lockAllDrawingTools = function() {
        return this._innerAPI().lockAllDrawingTools();
      }),
      (Model.prototype._getIFrameElement = function() {
        /** @type {(Element|null)} */
        var sinceHand = document.getElementById(this._id);
        if (null === sinceHand) {
          throw new Error("There is no such iframe");
        }
        return sinceHand;
      }),
      (Model.prototype._innerAPI = function() {
        return this._getIFrameElement().contentWindow.tradingViewApi;
      }),
      (Model.prototype._innerWindow = function() {
        return this._getIFrameElement().contentWindow;
      }),
      (Model.prototype._autoResizeChart = function() {
        if (this._options.fullscreen) {
          /** @type {string} */
          this._getIFrameElement().style.height = window.innerHeight + "px";
        }
      }),
      (Model.prototype._create = function() {
        var me = this;
        var html = this._render();
        /** @type {(Element|null)} */
        var df_div = document.getElementById(this._options.container_id);
        if (null === df_div) {
          throw new Error(
            "There is no such element - #" + this._options.container_id
          );
        }
        df_div.innerHTML = html;
        var elem = this._getIFrameElement();
        if (this._options.autosize || this._options.fullscreen) {
          /** @type {string} */
          elem.style.width = "100%";
          if (!this._options.fullscreen) {
            /** @type {string} */
            elem.style.height = "100%";
          }
        }
        window.addEventListener("resize", this._onWindowResize);
        this._onWindowResize();
        /**
         * @return {undefined}
         */
        var listener = function() {
          elem.removeEventListener("load", listener, false);
          elem.contentWindow.widgetReady(function() {
            /** @type {boolean} */
            me._ready = true;
            /** @type {number} */
            var i = 0;
            var queue = me._readyHandlers;
            for (; i < queue.length; i++) {
              var callback = queue[i];
              try {
                callback.call(me);
              } catch (logValues) {
                console.error(logValues);
              }
            }
            elem.contentWindow.initializationFinished();
          });
        };
        elem.addEventListener("load", listener, false);
      }),
      (Model.prototype._render = function() {
        /** @type {!Window} */
        var _languages = window;
        _languages[this._id] = {
          datafeed: this._options.datafeed,
          customFormatters: this._options.customFormatters,
          brokerFactory: this._options.brokerFactory,
          overrides: this._options.overrides,
          studiesOverrides: this._options.studies_overrides,
          disabledFeatures: this._options.disabled_features,
          enabledFeatures: this._options.enabled_features,
          brokerConfig: this._options.brokerConfig,
          restConfig: this._options.restConfig,
          favorites: this._options.favorites,
          logo: this._options.logo,
          numeric_formatting: this._options.numeric_formatting,
          rss_news_feed: this._options.rss_news_feed,
          newsProvider: this._options.news_provider,
          loadLastChart: this._options.load_last_chart,
          saveLoadAdapter: this._options.save_load_adapter,
          loading_screen: this._options.loading_screen,
          settingsAdapter: this._options.settings_adapter,
          customIndicatorsUrl: this._options.indicators_file_name
        };
        if (this._options.saved_data) {
          _languages[this._id].chartContent = {
            json: this._options.saved_data
          };
        }
        /** @type {string} */
        var e =
          (this._options.library_path || "") +
          "static/" +
          this._options.locale +
          "-tv-chart.aa0061904b783ada8056.html#symbol=" +
          encodeURIComponent(this._options.symbol) +
          "&interval=" +
          encodeURIComponent(this._options.interval) +
          (this._options.timeframe
            ? "&timeframe=" + encodeURIComponent(this._options.timeframe)
            : "") +
          (this._options.toolbar_bg
            ? "&toolbarbg=" + this._options.toolbar_bg.replace("#", "")
            : "") +
          (this._options.studies_access
            ? "&studiesAccess=" +
              encodeURIComponent(JSON.stringify(this._options.studies_access))
            : "") +
          "&widgetbar=" +
          encodeURIComponent(JSON.stringify(this._options.widgetbar)) +
          (this._options.drawings_access
            ? "&drawingsAccess=" +
              encodeURIComponent(JSON.stringify(this._options.drawings_access))
            : "") +
          "&timeFrames=" +
          encodeURIComponent(JSON.stringify(this._options.time_frames)) +
          "&locale=" +
          encodeURIComponent(this._options.locale) +
          "&uid=" +
          encodeURIComponent(this._id) +
          "&clientId=" +
          encodeURIComponent(String(this._options.client_id)) +
          "&userId=" +
          encodeURIComponent(String(this._options.user_id)) +
          (this._options.charts_storage_url
            ? "&chartsStorageUrl=" +
              encodeURIComponent(this._options.charts_storage_url)
            : "") +
          (this._options.charts_storage_api_version
            ? "&chartsStorageVer=" +
              encodeURIComponent(this._options.charts_storage_api_version)
            : "") +
          (this._options.custom_css_url
            ? "&customCSS=" + encodeURIComponent(this._options.custom_css_url)
            : "") +
          (this._options.auto_save_delay
            ? "&autoSaveDelay=" +
              encodeURIComponent(String(this._options.auto_save_delay))
            : "") +
          "&debug=" +
          this._options.debug +
          (this._options.snapshot_url
            ? "&snapshotUrl=" + encodeURIComponent(this._options.snapshot_url)
            : "") +
          (this._options.timezone
            ? "&timezone=" + encodeURIComponent(this._options.timezone)
            : "") +
          (this._options.study_count_limit
            ? "&studyCountLimit=" +
              encodeURIComponent(String(this._options.study_count_limit))
            : "") +
          (this._options.symbol_search_request_delay
            ? "&ssreqdelay=" +
              encodeURIComponent(
                String(this._options.symbol_search_request_delay)
              )
            : "") +
          (this._options.theme
            ? "&theme=" + encodeURIComponent(String(this._options.theme))
            : "");
        return (
          '<iframe id="' +
          this._id +
          '" name="' +
          this._id +
          '"  src="' +
          e +
          '"' +
          (this._options.autosize || this._options.fullscreen
            ? ""
            : ' width="' +
              this._options.width +
              '" height="' +
              this._options.height +
              '"') +
          ' frameborder="0" allowTransparency="true" scrolling="no" allowfullscreen style="display:block;"></iframe>'
        );
      }),
      Model
    );
  })();
  var type = UnsignedLong;
  window.TradingView = window.TradingView || {};
  /** @type {function(): ?} */
  window.TradingView.version = VERSION;
  /** @type {function(): ?} */
  self.version = VERSION;
  /** @type {function(?): undefined} */
  self.onready = cb;
  self.widget = type;
  Object.defineProperty(self, "__esModule", {
    value: true
  });
});
